import requests
import datetime
import vk_api
from time import time
# Мой бот в Telegram: Wishmaster_weather_bot (@Wish_weather_bot)
errorMessage = 'Не могу распознать город. Попробуйте уточнить его название и ввести еще раз.'
helpMessage = 'Используй команду /cweather <искомый город>, чтобы получить текущую погоду. ' \
              'Прогноз пока не завезли, но зато он выводит поготу с картиночкой искомого города!'
translate_url = "https://translate.yandex.net/api/v1.5/tr.json/translate"
translate_key = 'trnsl.1.1.20180507T082546Z.d625baa3847ceab8.48895545c7773bc0be456c0c32a16fbe363632f3'


class Weather_bot:
    def __init__(self, token):
        self.token = token
        self.api_url = "https://api.telegram.org/bot571022967:AAGubDpB5mzx2DZ8ljJVEnpZ0uhNV68RCGM/".format(token)

    def get_updates(self, offset=None, timeout=30):
        method = 'getUpdates'
        params = {'timeout': timeout, 'offset': offset}
        resp = requests.get(self.api_url + method, params)
        result_json = resp.json()['result']
        return result_json

    def send_message(self, chat_id, text):
        params = {'chat_id': chat_id, 'text': text}
        method = 'sendMessage'
        resp = requests.post(self.api_url + method, params)
        return resp

    def send_photo(self, chat_id, photo):
        params = {'chat_id': chat_id, 'photo': photo}
        method = 'sendPhoto'
        resp = requests.post(self.api_url + method, params)
        return resp

    def get_last_update(self):
        get_result = self.get_updates()

        if len(get_result) > 0:
            last_update = get_result[-1]
        else:
            last_update = get_result[len(get_result)]
        return last_update

weather_bot = Weather_bot("571022967:AAGubDpB5mzx2DZ8ljJVEnpZ0uhNV68RCGM")

def main():
    new_offset = None
    while True:
        now = datetime.datetime.now()
        today = now.day
        last_chat_text = None

        try:
            update = weather_bot.get_updates(new_offset)
            if (update == {}):
                continue
            last_update = weather_bot.get_last_update()
        except Exception:
            continue

        last_update_id = last_update['update_id']
        last_chat_text = last_update['message']['text']
        last_chat_id = last_update['message']['chat']['id']
        last_chat_name = last_update['message']['chat']['first_name']

        if last_chat_text.split()[0] == '/cweather':
            try:
                translate = GetTranslate('город ' + last_chat_text)
                translate = translate.split('the city of ')[-1]
                translate = translate.split('city ')[-1]
            except Exception:
                pass
            #           Анализируем полученное сообщение
            #           Получаем основную информацию о погоде:
            #           Если не распознался город надо выкинуть исключение
            last_chat_text = last_chat_text.split()[1]
            try:
                inquiry = GetWeather(last_chat_text)
            except Exception:
                weather_bot.send_message(last_chat_id, errorMessage)
                new_offset = last_update_id + 1
                continue

            #           Получаем url наиболее подходящей фотографии из vk
            img_url_final = None
            try:
                img_url_final = GetUrl(translate)
            except Exception:
                try:
                    img_url_final = GetUrl(last_chat_text)
                except Exception:
                    pass

            #           Отправляем сообщения пользователю:
            weather_msg = 'Weather: ' + inquiry['main_weather']
            weather_bot.send_message(last_chat_id, weather_msg)

            desc_msg = 'Description: ' + inquiry['description']
            weather_bot.send_message(last_chat_id, desc_msg)

            temp_msg = 'Temperature: ' + str(inquiry['temperature']) + ' Celsium'
            weather_bot.send_message(last_chat_id, temp_msg)
            if img_url_final is not None:
                weather_bot.send_photo(last_chat_id, img_url_final)

        elif last_chat_text.split()[0] == '/forecast':
            print('blablabl')
        elif last_chat_text == '/help':
            weather_bot.send_message(last_chat_id, helpMessage)
        else:
            weather_bot.send_message(last_chat_id, 'Print /help to see my abilities')
        new_offset = last_update_id + 1

def GetUrl(translation):
    add = ['weather photo city ', 'weather city ', 'city ', '']
    img_url = None
    for i in add:
        vk_message = i + translation
        photo_values = {'q': vk_message, 'count': 1, 'offset': time() % 5}
        response = vk.method("photos.search", photo_values)
        if response['count'] != 0:
            for i in response["items"]:
                if i.get("photo_807"):
                    img_url = i["photo_807"]
                    break
            if(img_url is not None):
                break
            for i in response["items"]:
                if i.get("photo_604"):
                    img_url = i["photo_604"]
                    break
        if(img_url is not None):
            break
    return img_url

def GetWeather(city):
    inquiry = dict()
    url = "https://api.openweathermap.org/data/2.5/weather?q={}".format(city)
    url = url + '&units=metric'
    api_key = "&appid=81931327e738eed642cf6d54c2dc2ea0"
    weather_request = requests.get(url+api_key)
    weather_json = weather_request.json()['weather']
    inquiry['main_weather'] = weather_json[0]['main']
    inquiry['temperature'] = weather_request.json()['main']['temp']
    inquiry['pressure'] = weather_request.json()['main']['pressure']
    inquiry['description'] = weather_json[0]['description']
    return inquiry

def GetTranslate(message):
    text = message
    lang = 'ru-en'
    r = requests.post(translate_url, data={'key': translate_key, 'text': text, 'lang': lang})
    translation = r.json()['text'][0]
    return translation

with open('token.txt', 'r') as f:
    handle = f.readline()
weather_bot = Weather_bot(handle)

with open('vk.txt', 'r') as g:
    login_vk = g.readline()[:-1]
    password_vk = g.readline()

vk = vk_api.VkApi(login=login_vk, password=password_vk)
vk.auth()

if __name__ == '__main__':
    main()

