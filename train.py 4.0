import glob
import re
import json
import argparse

def model_creation(file, words, args):
    last_word = str()
    counter = 0
    for line in file:
        ClearedLine = re.sub(r'[^\w\s]', '', line)
        if args.lc == True:
            ClearedLine = line.lower()
        ClearedLine = ClearedLine.split()

        if counter != 0:
            if last_word in words:
                if ClearedLine[0] in words[last_word]:
                    words[last_word][ClearedLine[0]] += 1
                else:
                    words[last_word][ClearedLine[0]] = 1
            else:
                words[last_word] = dict({ClearedLine[0]: 1})

        i = 0
        for pos, val in enumerate(ClearedLine):
            if ClearedLine[pos] not in words:
                if pos == len(ClearedLine) - 1:
                    last_word = ClearedLine[pos]
                else:
                    words[ClearedLine[pos]] = dict({ClearedLine[pos + 1]: 1})
            else:
                if pos == len(ClearedLine) - 1:
                    last_word = ClearedLine[pos]
                else:
                    if ClearedLine[pos + 1] in words[ClearedLine[pos]]:
                        words[ClearedLine[pos]][ClearedLine[pos + 1]] += 1
                    else:
                        words[ClearedLine[pos]][ClearedLine[pos + 1]] = 1
        counter = counter + 1
    if last_word in words:
        words[last_word]['END'] = 1
    else:
        words[last_word] = dict({'END': 1})


def parse_from_path(args, words):
    files = glob.glob(pathname = args.input_dir + '\*') #glob.glob возвращает список путей, соответствующих шаблону input_dir
    for name in files:
        with open(name) as file:
            model_creation(file, words, args)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-input_dir', '--input_dir', help = 'Specify the path to the directory', required = True)
    parser.add_argument('-model', '--model', default = None, help = 'Specify the path to the directory', required = True)
    parser.add_argument('-lc', '--lc', action = "store_true", help = 'Switch letters to lowercase')
    return parser.parse_args()

def main():
    words = {}
    args_namespace = parse_args()
    if args_namespace.input_dir:
        parse_from_path(args_namespace, words)
    else:
        print("Exit code = 0")
    model = open(args_namespace.model, 'w')  # Записываем полученный словарь
    JsonWords = json.dumps(words)
    model.write(JsonWords)
    model.close()

main()


